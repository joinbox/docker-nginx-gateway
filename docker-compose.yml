version: '2'
services:
  dummy-service-one:
    image: dummy-service-one
    container_name: 'dummy-service-one'
    environment:
      - NODE_ENV=dev
      - NETWORK_ACCESS=internal
      - VIRTUAL_HOST=dummy-service-one.l.dns.porn
    command: /home/ubuntu/app/node_modules/.bin/nodemon /home/ubuntu/app/index.js
    ports:
      - "10201:10201"
    volumes:
        - ./dummy-service-one/app:/home/ubuntu/app/
  dummy-service-two:
    image: dummy-service-two
    container_name: 'dummy-service-two'
    environment:
      - NODE_ENV=dev
      - NETWORK_ACCESS=internal
      - VIRTUAL_HOST=dummy-service-two.l.dns.porn
    command: node /home/ubuntu/app/index.js
    ports:
      - "10202:10202"
  loopback-microservice:
    image: node:latest
    container_name: 'loopback-microservice'
    environment:
      - NODE_ENV=dev
      - NETWORK_ACCESS=internal
      - VIRTUAL_HOST=loopback-microservice.l.dns.porn
    command: /bin/bash -c "cd /home/ubuntu/app/ && node index.js"
    ports:
      - "11100:11100"
    volumes:
        - ./loopback-microservice-template:/home/ubuntu/app/
  proxy:
    image: nginx
    container_name: proxy
    ports:
      - "11111:11111"
    volumes:
      - /etc/nginx/conf.d
      - ./conf/proxy/network_internal.conf:/etc/nginx/network_internal.conf
      - ./conf/proxy/001_proxy_cache.conf:/etc/nginx/conf.d/001_proxy_cache.conf
  dockergen:
    image: jwilder/docker-gen
    command: -notify-sighup proxy -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    volumes_from:
      - proxy
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./conf/proxy/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl
  gateway:
    image: gateway
    container_name: 'gateway'
    command:  /bin/bash -c "envsubst < /etc/nginx/conf.d/gateway.tmpl > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    network_mode: "host"
    environment:
      - DNS_POSTFIX=l.dns.porn
    ports:
      - "80:80"
      - "443:443"
  book-microservice-postgres:
    image: postgres:latest
    container_name: 'book-microservice-postgres'
    environment:
      - POSTGRES_PASSWORD=book-microservice
      - POSTGRES_USER=book-microservice
      - POSTGRES_DB=book-microservice
    restart: always
    command: postgres
    ports:
      - "5432:5432"
